import React, { Component } from 'react'
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

class LikeButton extends Component {
  constructor () {
    super()
    this.state = {
      isLiked: false,
      count: -1
    }
  }

  handleClickOnLikeButton () {

    // setState 方法由父类 Component 所提供
    // 当我们调用这个函数的时候，React.js 会更新组件的状态 state ，并且重新调用 render 方法
    // 然后再把 render 方法所渲染的最新的内容显示到页面上。
    // 当你调用 setState 的时候，React.js 并不会马上修改 state
    // 而是把这个对象放到一个更新队列里面，稍后才会从队列当中把新的状态提取出来合并到 state 当中
    // 然后再触发组件更新。


    // a false
    // b false
    // c -1
    // g -1
    // d -1
    // e 0
    // f 1
    console.log('a', this.state.isLiked)
    this.setState({
      isLiked: !this.state.isLiked
    })
    console.log('b', this.state.isLiked)

    // 接受一个函数作为参数。
    // React.js 会把上一个 setState 的结果传入这个函数
    // 你就可以使用该结果进行运算、操作，然后返回一个对象作为更新 state 的对象
    console.log('c', this.state.count)
    this.setState((prevState) => {
      console.log('d', prevState.count)
      return { count: 0 }
    })
    this.setState((prevState) => {
      console.log('e', prevState.count)
      return { count: prevState.count + 1 } // 上一个 setState 的返回是 count 为 0，当前返回 1
    })
    this.setState((prevState) => {
      console.log('f', prevState.count)
      return { count: prevState.count + 2 } // 上一个 setState 的返回是 count 为 1，当前返回 3
    })
    console.log('g', this.state.count)
  }

  render () {

    // 上面我们进行了三次 setState，但是实际上组件只会重新渲染一次，而不是三次
    // 这是因为在 React.js 内部会把 JavaScript 事件循环中的消息队列的同一个消息中的 setState
    // 都进行合并以后再重新渲染组件。
    console.log('only render once for multi setState')
    return (
      <button onClick={this.handleClickOnLikeButton.bind(this)}>
        {this.state.isLiked ? '取消' : '点赞'} 👍
      </button>
    )
  }
}

class Index extends Component {
  render () {
    return (
      <div>
        <LikeButton />
      </div>
    )
  }
}

ReactDOM.render(
  <React.StrictMode>
    <Index />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
